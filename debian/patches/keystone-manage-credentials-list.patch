--- a/keystone/backends/sqlalchemy/api/credentials.py
+++ b/keystone/backends/sqlalchemy/api/credentials.py
@@ -32,6 +32,11 @@
         result = session.query(models.Group).filter_by(id=id).first()
         return result
 
+    def get_all(self, session=None):
+        if not session:
+            session = get_session()
+        return session.query(models.Credentials)
+
     def get_by_access(self, access, session=None):
         if not session:
             session = get_session()
--- a/keystone/backends/sqlalchemy/models.py
+++ b/keystone/backends/sqlalchemy/models.py
@@ -126,7 +126,7 @@
     name = Column(String(255), unique=True)
     desc = Column(String(255))
     enabled = Column(Integer)
-
+    credentials=relationship('Credentials', backref='tenant', cascade='all')
 
 class User(Base, KeystoneBase):
     __tablename__ = 'users'
@@ -140,7 +140,6 @@
     roles = relationship(UserRoleAssociation, cascade="all")
     credentials = relationship('Credentials', backref='user', cascade="all")
 
-
 class Credentials(Base, KeystoneBase):
     __tablename__ = 'credentials'
     __api__ = 'credentials'
@@ -151,7 +150,6 @@
     key = Column(String(255))
     secret = Column(String(255))
 
-
 class Token(Base, KeystoneBase):
     __tablename__ = 'token'
     __api__ = 'token'
--- a/keystone/manage/__init__.py
+++ b/keystone/manage/__init__.py
@@ -257,6 +257,9 @@
                 secrete=args[5], tenant=optional_arg(args, 6)):
             print "SUCCESS: Credentials %s created." % object_id
 
+    elif (object_type, action) == ('credentials', 'list'):
+        print_table(('id', 'type', 'user', 'tenant'), api.list_credentials())
+
     elif object_type == 'credentials':
         raise optparse.OptParseError(ACTION_NOT_SUPPORTED % ('credentials'))
 
--- a/keystone/manage/api.py
+++ b/keystone/manage/api.py
@@ -191,3 +191,10 @@
     obj.secret = secrete
     obj.tenant_id = tenant
     return db_api.CREDENTIALS.create(obj)
+
+def list_credentials():
+    objects = db_api.CREDENTIALS.get_all()
+    if objects == None:
+        raise IndexError("No credentials found")
+    return [[o.id, o.type, o.user.name, o.tenant.name ] for o in objects]
+
